import matplotlib.pyplot as plt

import torchvision.transforms as transforms
from PIL import Image

import torch

"""
Ref: https://ichi.pro/pytorch-no-kenchosei-mappu-o-shiyoshita-nyu-rarunettowa-ku-no-shikakuka-44657159719604
"""

data_path = './image.jpg'
model_path = './temp/epoch44_loss0.05364989270182217.pth'
phase = 'test'

# Read image with PIL
img = Image.open(data_path)

# Load model
model = torch.load(model_path)

# Set dict (Copy from training)
transform_dict = {
    'train': transforms.Compose(
        [transforms.Resize((600, 600)),  # Set image size (Images will be automatically resized)
         transforms.RandomHorizontalFlip(),
         transforms.ToTensor(),
         transforms.Normalize(mean=[0.485, 0.456, 0.406],
                              std=[0.229, 0.224, 0.225]),
         ]),
    'test': transforms.Compose(
        [transforms.Resize((600, 600)),
         transforms.ToTensor(),
         transforms.Normalize(mean=[0.485, 0.456, 0.406],
                              std=[0.229, 0.224, 0.225]),
         ])}

# Get transformed data
X = transform_dict[phase](img)

# Set model for evaluation
model.eval()

# we need to find the gradient with respect to the input image, so we need to call requires_grad_ on it
X.requires_grad_()

# Get values
scores = model(X.unsqueeze(0).cuda())
print(scores)

# Get the index corresponding to the maximum score and the maximum score itself.
score_max_index = scores.argmax()
score_max = scores[0, score_max_index]

score_max.backward()

# Retireve the saliency map and also pick the maximum value from channels on each pixel.
# In this case, we look at dim=1. Recall the shape (batch_size, channel, width, height)
extractX = X.grad.data.abs()
saliency, _ = torch.max(X.grad.data.abs(), dim=0)
saliency = saliency.reshape(600, 600)
image = X.reshape(-1, 600, 600)

# # code to plot the saliency map as a heatmap
# plt.imshow(saliency, cmap=plt.cm.hot)
# plt.axis('off')
# plt.show()

# Visualize the image and the saliency map
fig, ax = plt.subplots(1, 2)
ax[0].imshow(image.cpu().detach().numpy().transpose(1, 2, 0))
ax[0].axis('off')
ax[1].imshow(saliency.cpu(), cmap='hot')
ax[1].axis('off')
plt.tight_layout()
fig.suptitle('The Image and Its Saliency Map')
plt.show()
